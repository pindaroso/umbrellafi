/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FunctionsResponse {
  export type CommitmentStruct = {
    requestId: BytesLike;
    coordinator: AddressLike;
    estimatedTotalCostJuels: BigNumberish;
    client: AddressLike;
    subscriptionId: BigNumberish;
    callbackGasLimit: BigNumberish;
    adminFee: BigNumberish;
    donFee: BigNumberish;
    gasOverheadBeforeCallback: BigNumberish;
    gasOverheadAfterCallback: BigNumberish;
    timeoutTimestamp: BigNumberish;
  };

  export type CommitmentStructOutput = [
    requestId: string,
    coordinator: string,
    estimatedTotalCostJuels: bigint,
    client: string,
    subscriptionId: bigint,
    callbackGasLimit: bigint,
    adminFee: bigint,
    donFee: bigint,
    gasOverheadBeforeCallback: bigint,
    gasOverheadAfterCallback: bigint,
    timeoutTimestamp: bigint
  ] & {
    requestId: string;
    coordinator: string;
    estimatedTotalCostJuels: bigint;
    client: string;
    subscriptionId: bigint;
    callbackGasLimit: bigint;
    adminFee: bigint;
    donFee: bigint;
    gasOverheadBeforeCallback: bigint;
    gasOverheadAfterCallback: bigint;
    timeoutTimestamp: bigint;
  };
}

export interface IOwnableFunctionsRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "fulfill"
      | "getAdminFee"
      | "getAllowListId"
      | "getContractById"
      | "getProposedContractById"
      | "getProposedContractSet"
      | "isValidCallbackGasLimit"
      | "owner"
      | "pause"
      | "proposeContractsUpdate"
      | "sendRequest"
      | "sendRequestToProposed"
      | "setAllowListId"
      | "transferOwnership"
      | "unpause"
      | "updateContracts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      FunctionsResponse.CommitmentStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowListId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedContractById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedContractSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCallbackGasLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeContractsUpdate",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequestToProposed",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateContracts",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowListId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedContractById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedContractSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeContractsUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequestToProposed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateContracts",
    data: BytesLike
  ): Result;
}

export interface IOwnableFunctionsRouter extends BaseContract {
  connect(runner?: ContractRunner | null): IOwnableFunctionsRouter;
  waitForDeployment(): Promise<this>;

  interface: IOwnableFunctionsRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  fulfill: TypedContractMethod<
    [
      response: BytesLike,
      err: BytesLike,
      juelsPerGas: BigNumberish,
      costWithoutFulfillment: BigNumberish,
      transmitter: AddressLike,
      commitment: FunctionsResponse.CommitmentStruct
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  getAdminFee: TypedContractMethod<[], [bigint], "view">;

  getAllowListId: TypedContractMethod<[], [string], "view">;

  getContractById: TypedContractMethod<[id: BytesLike], [string], "view">;

  getProposedContractById: TypedContractMethod<
    [id: BytesLike],
    [string],
    "view"
  >;

  getProposedContractSet: TypedContractMethod<
    [],
    [[string[], string[]]],
    "view"
  >;

  isValidCallbackGasLimit: TypedContractMethod<
    [subscriptionId: BigNumberish, callbackGasLimit: BigNumberish],
    [void],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  proposeContractsUpdate: TypedContractMethod<
    [proposalSetIds: BytesLike[], proposalSetAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  sendRequest: TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      dataVersion: BigNumberish,
      callbackGasLimit: BigNumberish,
      donId: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  sendRequestToProposed: TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      dataVersion: BigNumberish,
      callbackGasLimit: BigNumberish,
      donId: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  setAllowListId: TypedContractMethod<
    [allowListId: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateContracts: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fulfill"
  ): TypedContractMethod<
    [
      response: BytesLike,
      err: BytesLike,
      juelsPerGas: BigNumberish,
      costWithoutFulfillment: BigNumberish,
      transmitter: AddressLike,
      commitment: FunctionsResponse.CommitmentStruct
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAdminFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllowListId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractById"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getProposedContractById"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getProposedContractSet"
  ): TypedContractMethod<[], [[string[], string[]]], "view">;
  getFunction(
    nameOrSignature: "isValidCallbackGasLimit"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, callbackGasLimit: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposeContractsUpdate"
  ): TypedContractMethod<
    [proposalSetIds: BytesLike[], proposalSetAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      dataVersion: BigNumberish,
      callbackGasLimit: BigNumberish,
      donId: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendRequestToProposed"
  ): TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      dataVersion: BigNumberish,
      callbackGasLimit: BigNumberish,
      donId: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowListId"
  ): TypedContractMethod<[allowListId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateContracts"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
