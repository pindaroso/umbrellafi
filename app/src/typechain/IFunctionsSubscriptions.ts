/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IFunctionsSubscriptions {
  export type ConsumerStruct = {
    allowed: boolean;
    initiatedRequests: BigNumberish;
    completedRequests: BigNumberish;
  };

  export type ConsumerStructOutput = [
    allowed: boolean,
    initiatedRequests: bigint,
    completedRequests: bigint
  ] & {
    allowed: boolean;
    initiatedRequests: bigint;
    completedRequests: bigint;
  };

  export type SubscriptionStruct = {
    balance: BigNumberish;
    owner: AddressLike;
    blockedBalance: BigNumberish;
    proposedOwner: AddressLike;
    consumers: AddressLike[];
    flags: BytesLike;
  };

  export type SubscriptionStructOutput = [
    balance: bigint,
    owner: string,
    blockedBalance: bigint,
    proposedOwner: string,
    consumers: string[],
    flags: string
  ] & {
    balance: bigint;
    owner: string;
    blockedBalance: bigint;
    proposedOwner: string;
    consumers: string[];
    flags: string;
  };
}

export declare namespace FunctionsResponse {
  export type CommitmentStruct = {
    requestId: BytesLike;
    coordinator: AddressLike;
    estimatedTotalCostJuels: BigNumberish;
    client: AddressLike;
    subscriptionId: BigNumberish;
    callbackGasLimit: BigNumberish;
    adminFee: BigNumberish;
    donFee: BigNumberish;
    gasOverheadBeforeCallback: BigNumberish;
    gasOverheadAfterCallback: BigNumberish;
    timeoutTimestamp: BigNumberish;
  };

  export type CommitmentStructOutput = [
    requestId: string,
    coordinator: string,
    estimatedTotalCostJuels: bigint,
    client: string,
    subscriptionId: bigint,
    callbackGasLimit: bigint,
    adminFee: bigint,
    donFee: bigint,
    gasOverheadBeforeCallback: bigint,
    gasOverheadAfterCallback: bigint,
    timeoutTimestamp: bigint
  ] & {
    requestId: string;
    coordinator: string;
    estimatedTotalCostJuels: bigint;
    client: string;
    subscriptionId: bigint;
    callbackGasLimit: bigint;
    adminFee: bigint;
    donFee: bigint;
    gasOverheadBeforeCallback: bigint;
    gasOverheadAfterCallback: bigint;
    timeoutTimestamp: bigint;
  };
}

export interface IFunctionsSubscriptionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptSubscriptionOwnerTransfer"
      | "addConsumer"
      | "cancelSubscription"
      | "createSubscription"
      | "createSubscriptionWithConsumer"
      | "getConsumer"
      | "getFlags"
      | "getSubscription"
      | "getSubscriptionCount"
      | "getSubscriptionsInRange"
      | "getTotalBalance"
      | "oracleWithdraw"
      | "ownerCancelSubscription"
      | "pendingRequestExists"
      | "proposeSubscriptionOwnerTransfer"
      | "recoverFunds"
      | "removeConsumer"
      | "setFlags"
      | "timeoutRequests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscriptionWithConsumer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsumer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlags",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionsInRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerCancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSubscriptionOwnerTransfer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlags",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutRequests",
    values: [FunctionsResponse.CommitmentStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscriptionWithConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionsInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerCancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFlags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeoutRequests",
    data: BytesLike
  ): Result;
}

export interface IFunctionsSubscriptions extends BaseContract {
  connect(runner?: ContractRunner | null): IFunctionsSubscriptions;
  waitForDeployment(): Promise<this>;

  interface: IFunctionsSubscriptionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptSubscriptionOwnerTransfer: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addConsumer: TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelSubscription: TypedContractMethod<
    [subscriptionId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<[], [bigint], "nonpayable">;

  createSubscriptionWithConsumer: TypedContractMethod<
    [consumer: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getConsumer: TypedContractMethod<
    [client: AddressLike, subscriptionId: BigNumberish],
    [IFunctionsSubscriptions.ConsumerStructOutput],
    "view"
  >;

  getFlags: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [string],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [IFunctionsSubscriptions.SubscriptionStructOutput],
    "view"
  >;

  getSubscriptionCount: TypedContractMethod<[], [bigint], "view">;

  getSubscriptionsInRange: TypedContractMethod<
    [subscriptionIdStart: BigNumberish, subscriptionIdEnd: BigNumberish],
    [IFunctionsSubscriptions.SubscriptionStructOutput[]],
    "view"
  >;

  getTotalBalance: TypedContractMethod<[], [bigint], "view">;

  oracleWithdraw: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ownerCancelSubscription: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  pendingRequestExists: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [boolean],
    "view"
  >;

  proposeSubscriptionOwnerTransfer: TypedContractMethod<
    [subscriptionId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  recoverFunds: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  removeConsumer: TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  setFlags: TypedContractMethod<
    [subscriptionId: BigNumberish, flags: BytesLike],
    [void],
    "nonpayable"
  >;

  timeoutRequests: TypedContractMethod<
    [requestsToTimeoutByCommitment: FunctionsResponse.CommitmentStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptSubscriptionOwnerTransfer"
  ): TypedContractMethod<[subscriptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addConsumer"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "createSubscriptionWithConsumer"
  ): TypedContractMethod<[consumer: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getConsumer"
  ): TypedContractMethod<
    [client: AddressLike, subscriptionId: BigNumberish],
    [IFunctionsSubscriptions.ConsumerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlags"
  ): TypedContractMethod<[subscriptionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish],
    [IFunctionsSubscriptions.SubscriptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscriptionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSubscriptionsInRange"
  ): TypedContractMethod<
    [subscriptionIdStart: BigNumberish, subscriptionIdEnd: BigNumberish],
    [IFunctionsSubscriptions.SubscriptionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleWithdraw"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ownerCancelSubscription"
  ): TypedContractMethod<[subscriptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingRequestExists"
  ): TypedContractMethod<[subscriptionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposeSubscriptionOwnerTransfer"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverFunds"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeConsumer"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFlags"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, flags: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutRequests"
  ): TypedContractMethod<
    [requestsToTimeoutByCommitment: FunctionsResponse.CommitmentStruct[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
