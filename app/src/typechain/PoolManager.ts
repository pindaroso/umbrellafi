/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PoolManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPool"
      | "deposit"
      | "getAssets"
      | "indices"
      | "lookupTable"
      | "poolCount"
      | "pools"
      | "rebalance"
      | "riskEngine"
      | "subscriptionId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "indices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lookupTable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "riskEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "indices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lookupTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskEngine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
}

export interface PoolManager extends BaseContract {
  connect(runner?: ContractRunner | null): PoolManager;
  waitForDeployment(): Promise<this>;

  interface: PoolManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPool: TypedContractMethod<
    [symbol: string, name: string, fee: BigNumberish, assets: string[]],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [index: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAssets: TypedContractMethod<[pool: AddressLike], [string[]], "view">;

  indices: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  lookupTable: TypedContractMethod<[], [string], "view">;

  poolCount: TypedContractMethod<[], [bigint], "view">;

  pools: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        fee: bigint;
        created: bigint;
        updated: bigint;
      }
    ],
    "view"
  >;

  rebalance: TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  riskEngine: TypedContractMethod<[], [string], "view">;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [symbol: string, name: string, fee: BigNumberish, assets: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [index: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAssets"
  ): TypedContractMethod<[pool: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "indices"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "lookupTable"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        fee: bigint;
        created: bigint;
        updated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "riskEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
