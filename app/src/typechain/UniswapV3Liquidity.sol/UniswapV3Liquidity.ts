/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UniswapV3LiquidityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collectAllFees"
      | "decreaseLiquidityCurrentRange"
      | "increaseLiquidityCurrentRange"
      | "mintNewPosition"
      | "nonfungiblePositionManager"
      | "onERC721Received"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collectAllFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityCurrentRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityCurrentRange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityCurrentRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityCurrentRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
}

export interface UniswapV3Liquidity extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapV3Liquidity;
  waitForDeployment(): Promise<this>;

  interface: UniswapV3LiquidityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collectAllFees: TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  decreaseLiquidityCurrentRange: TypedContractMethod<
    [tokenId: BigNumberish, liquidity: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  increaseLiquidityCurrentRange: TypedContractMethod<
    [
      tokenId: BigNumberish,
      amount0ToAdd: BigNumberish,
      amount1ToAdd: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;

  mintNewPosition: TypedContractMethod<
    [amount0ToAdd: BigNumberish, amount1ToAdd: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        tokenId: bigint;
        liquidity: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;

  nonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      fromAddress: AddressLike,
      tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collectAllFees"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseLiquidityCurrentRange"
  ): TypedContractMethod<
    [tokenId: BigNumberish, liquidity: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLiquidityCurrentRange"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      amount0ToAdd: BigNumberish,
      amount1ToAdd: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintNewPosition"
  ): TypedContractMethod<
    [amount0ToAdd: BigNumberish, amount1ToAdd: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        tokenId: bigint;
        liquidity: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      fromAddress: AddressLike,
      tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "view"
  >;

  filters: {};
}
