/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FunctionsResponse {
  export type RequestMetaStruct = {
    data: BytesLike;
    flags: BytesLike;
    requestingContract: AddressLike;
    availableBalance: BigNumberish;
    adminFee: BigNumberish;
    subscriptionId: BigNumberish;
    initiatedRequests: BigNumberish;
    callbackGasLimit: BigNumberish;
    dataVersion: BigNumberish;
    completedRequests: BigNumberish;
    subscriptionOwner: AddressLike;
  };

  export type RequestMetaStructOutput = [
    data: string,
    flags: string,
    requestingContract: string,
    availableBalance: bigint,
    adminFee: bigint,
    subscriptionId: bigint,
    initiatedRequests: bigint,
    callbackGasLimit: bigint,
    dataVersion: bigint,
    completedRequests: bigint,
    subscriptionOwner: string
  ] & {
    data: string;
    flags: string;
    requestingContract: string;
    availableBalance: bigint;
    adminFee: bigint;
    subscriptionId: bigint;
    initiatedRequests: bigint;
    callbackGasLimit: bigint;
    dataVersion: bigint;
    completedRequests: bigint;
    subscriptionOwner: string;
  };

  export type CommitmentStruct = {
    requestId: BytesLike;
    coordinator: AddressLike;
    estimatedTotalCostJuels: BigNumberish;
    client: AddressLike;
    subscriptionId: BigNumberish;
    callbackGasLimit: BigNumberish;
    adminFee: BigNumberish;
    donFee: BigNumberish;
    gasOverheadBeforeCallback: BigNumberish;
    gasOverheadAfterCallback: BigNumberish;
    timeoutTimestamp: BigNumberish;
  };

  export type CommitmentStructOutput = [
    requestId: string,
    coordinator: string,
    estimatedTotalCostJuels: bigint,
    client: string,
    subscriptionId: bigint,
    callbackGasLimit: bigint,
    adminFee: bigint,
    donFee: bigint,
    gasOverheadBeforeCallback: bigint,
    gasOverheadAfterCallback: bigint,
    timeoutTimestamp: bigint
  ] & {
    requestId: string;
    coordinator: string;
    estimatedTotalCostJuels: bigint;
    client: string;
    subscriptionId: bigint;
    callbackGasLimit: bigint;
    adminFee: bigint;
    donFee: bigint;
    gasOverheadBeforeCallback: bigint;
    gasOverheadAfterCallback: bigint;
    timeoutTimestamp: bigint;
  };
}

export interface IFunctionsCoordinatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDONPublicKey"
      | "getThresholdPublicKey"
      | "setDONPublicKey"
      | "setThresholdPublicKey"
      | "startRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDONPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThresholdPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDONPublicKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setThresholdPublicKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startRequest",
    values: [FunctionsResponse.RequestMetaStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThresholdPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThresholdPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRequest",
    data: BytesLike
  ): Result;
}

export interface IFunctionsCoordinator extends BaseContract {
  connect(runner?: ContractRunner | null): IFunctionsCoordinator;
  waitForDeployment(): Promise<this>;

  interface: IFunctionsCoordinatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDONPublicKey: TypedContractMethod<[], [string], "view">;

  getThresholdPublicKey: TypedContractMethod<[], [string], "view">;

  setDONPublicKey: TypedContractMethod<
    [donPublicKey: BytesLike],
    [void],
    "nonpayable"
  >;

  setThresholdPublicKey: TypedContractMethod<
    [thresholdPublicKey: BytesLike],
    [void],
    "nonpayable"
  >;

  startRequest: TypedContractMethod<
    [request: FunctionsResponse.RequestMetaStruct],
    [FunctionsResponse.CommitmentStructOutput],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDONPublicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getThresholdPublicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDONPublicKey"
  ): TypedContractMethod<[donPublicKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setThresholdPublicKey"
  ): TypedContractMethod<[thresholdPublicKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startRequest"
  ): TypedContractMethod<
    [request: FunctionsResponse.RequestMetaStruct],
    [FunctionsResponse.CommitmentStructOutput],
    "nonpayable"
  >;

  filters: {};
}
