/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DenominationsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ARS"
      | "AUD"
      | "BRL"
      | "BTC"
      | "CAD"
      | "CHF"
      | "CNY"
      | "ETH"
      | "EUR"
      | "GBP"
      | "INR"
      | "JPY"
      | "KRW"
      | "NGN"
      | "NZD"
      | "PHP"
      | "RUB"
      | "SGD"
      | "USD"
      | "ZAR"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ARS", values?: undefined): string;
  encodeFunctionData(functionFragment: "AUD", values?: undefined): string;
  encodeFunctionData(functionFragment: "BRL", values?: undefined): string;
  encodeFunctionData(functionFragment: "BTC", values?: undefined): string;
  encodeFunctionData(functionFragment: "CAD", values?: undefined): string;
  encodeFunctionData(functionFragment: "CHF", values?: undefined): string;
  encodeFunctionData(functionFragment: "CNY", values?: undefined): string;
  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "EUR", values?: undefined): string;
  encodeFunctionData(functionFragment: "GBP", values?: undefined): string;
  encodeFunctionData(functionFragment: "INR", values?: undefined): string;
  encodeFunctionData(functionFragment: "JPY", values?: undefined): string;
  encodeFunctionData(functionFragment: "KRW", values?: undefined): string;
  encodeFunctionData(functionFragment: "NGN", values?: undefined): string;
  encodeFunctionData(functionFragment: "NZD", values?: undefined): string;
  encodeFunctionData(functionFragment: "PHP", values?: undefined): string;
  encodeFunctionData(functionFragment: "RUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "SGD", values?: undefined): string;
  encodeFunctionData(functionFragment: "USD", values?: undefined): string;
  encodeFunctionData(functionFragment: "ZAR", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ARS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "AUD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BRL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BTC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CAD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CHF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CNY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EUR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GBP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "JPY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KRW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NGN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NZD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PHP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SGD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZAR", data: BytesLike): Result;
}

export interface Denominations extends BaseContract {
  connect(runner?: ContractRunner | null): Denominations;
  waitForDeployment(): Promise<this>;

  interface: DenominationsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ARS: TypedContractMethod<[], [string], "view">;

  AUD: TypedContractMethod<[], [string], "view">;

  BRL: TypedContractMethod<[], [string], "view">;

  BTC: TypedContractMethod<[], [string], "view">;

  CAD: TypedContractMethod<[], [string], "view">;

  CHF: TypedContractMethod<[], [string], "view">;

  CNY: TypedContractMethod<[], [string], "view">;

  ETH: TypedContractMethod<[], [string], "view">;

  EUR: TypedContractMethod<[], [string], "view">;

  GBP: TypedContractMethod<[], [string], "view">;

  INR: TypedContractMethod<[], [string], "view">;

  JPY: TypedContractMethod<[], [string], "view">;

  KRW: TypedContractMethod<[], [string], "view">;

  NGN: TypedContractMethod<[], [string], "view">;

  NZD: TypedContractMethod<[], [string], "view">;

  PHP: TypedContractMethod<[], [string], "view">;

  RUB: TypedContractMethod<[], [string], "view">;

  SGD: TypedContractMethod<[], [string], "view">;

  USD: TypedContractMethod<[], [string], "view">;

  ZAR: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ARS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AUD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BRL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BTC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CHF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CNY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EUR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GBP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "JPY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "KRW"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NGN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NZD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PHP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RUB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SGD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ZAR"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
