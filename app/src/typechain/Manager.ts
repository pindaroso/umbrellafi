/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createETF"
      | "deposit"
      | "etfs"
      | "etfsSize"
      | "getETFAssets"
      | "getETFAssetsAtIndex"
      | "getETFAtIndex"
      | "riskEngine"
      | "subscriptionId"
      | "updateWeights"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createETF",
    values: [string, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "etfs", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "etfsSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getETFAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getETFAssetsAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getETFAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "riskEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createETF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "etfs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "etfsSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getETFAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getETFAssetsAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getETFAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "riskEngine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface Manager extends BaseContract {
  connect(runner?: ContractRunner | null): Manager;
  waitForDeployment(): Promise<this>;

  interface: ManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createETF: TypedContractMethod<
    [symbol: string, name: string, fee: BigNumberish, assets: string[]],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [index: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  etfs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        fee: bigint;
        created: bigint;
        updated: bigint;
      }
    ],
    "view"
  >;

  etfsSize: TypedContractMethod<[], [bigint], "view">;

  getETFAssets: TypedContractMethod<[etf: AddressLike], [string[]], "view">;

  getETFAssetsAtIndex: TypedContractMethod<
    [etfIndex: BigNumberish],
    [string[]],
    "view"
  >;

  getETFAtIndex: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  riskEngine: TypedContractMethod<[], [string], "view">;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  updateWeights: TypedContractMethod<
    [etfIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [index: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createETF"
  ): TypedContractMethod<
    [symbol: string, name: string, fee: BigNumberish, assets: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [index: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "etfs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        fee: bigint;
        created: bigint;
        updated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "etfsSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getETFAssets"
  ): TypedContractMethod<[etf: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getETFAssetsAtIndex"
  ): TypedContractMethod<[etfIndex: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getETFAtIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "riskEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateWeights"
  ): TypedContractMethod<[etfIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [index: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
